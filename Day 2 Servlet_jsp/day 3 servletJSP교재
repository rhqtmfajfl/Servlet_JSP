▣ Servlet의 실행
Servlet은 HttpServlet 클래스를 상속받아 어떠한 요청 방식을 지원하는 Servlet인가에 따라서 doGet() 또는
doPost() 메소드를 재정의하여 구현한다. 웹 클라이언트로부터 Servlet이 요청된 방식에 따라서 doGet() 또는
doPost() 메소드가 Servlet 컨테이너에 의해 호출되어 Servlet의 기능을 처리하게 된다


ㅁ이부분을 중요하게 봐야 된다.


- 하이퍼링크 텍스트(<A>태그)를 클릭하여 요청한다.  GET 방식
- URL 을 주소필드에 입력하여 직접 요청한다.  GET 방식
- <IMG>태그로 요청한다.  GET 방식
- <FORM>태그로 요청한다.  method 속성의 값에 따라서 GET 방식 또는 POST 방식
- <IFRAME> 태그로 요청한다.  GET 방식


▣ <FORM> 태그
HTML 문서에서 사용자의 입력을 서버로 전달하는 기능은 <FORM> 태그를 이용해 구현된다. 다음은

<FORM> 태그에서 지원하는 속성이다.
• action : 사용자의 입력 데이터를 처리할 CGI 프로그램의 URL 주소를 지정한다.
• method : 사용자 데이터를 넘겨주는 방식을 지정하는데, GET과 POST 방식 두 가지다. 


GET은 입력 내용을 요청 URI 뒤에 붙여서 보내고, POST는 요청 바디에 담아서 보낸다.
• enctype : 서버로 보내지는 데이터의 형식을 지정한다. 종류는 세가지가 지원된다.

1. application/x-www-form-urlencoded    -> 타입명
디폴트 값은 이거다. 서버로 전송되기 전에 url-encode 된다는 뜻이다.

2. mutipart/form-data    -클라이언트에 있는파일을 업로드 하겠다 할때 이 부분 사용
파일 받으면서 설정해준게 이 값인데 이미지나 파일을 서버로 전송할 경우 이 방식을 사용한다고
한다.

3. text/plain
인코딩을 하지 않은 문자 그대로의 상태를 전송한다는 의미이다.



▣ Query 문자열(요청 파라미터)
Query 문자열이란 웹 클라이언트에서 웹 서버에 요청을 보낼 때 추가로 전달하는 name 과 value 로 구성되
는 문자열로서 요청 파라미터라고도 한다. 주로 다음과 같은 형식으로 전달되는데 전달방식은 GET 방식과
POST 방식이 있다. 
name1=value1&name2=value2&name3=value

POST는 전달할수 있는 요청 파라미터의 길이는 제한이 없다.

GET 방식은 제한이 잇다.


[ GET 방식 ]
- 전달되는 Query 문자열의 길이에 제한이 있고 내용이 브라우저의 주소 필드에 보여진다.
 - <FORM> 태그를 사용해도 되고 요청 URL 에 ? 기호와 함께 직접 Query 문자열을 붙여서 전달하는 것도
가능하다.
[ POST 방식 ]
- 전달되는 Query 문자열의 길이에 제한이 없고 내용이 브라우저의 주소 필드에 보여지지 않는다.
 - 전달 내요이 요청 바디에 담겨져서 전달된다. <FORM> 태그를 사용하여 요청할 때만 사용할 수 있다.


- Query 문자열의 추출
name 으로 하나의 value 값이 전달될 때
String address = request.getParameter(“address”);    리턴형이 스트링형
name 으로 여러 개의 value 값들이 전달될 때
String hobby[ ] = request.getParameterValues(“hobby”)   배열형 스트링  





Query 문자열 추출시의 한글 문제
Servlet 에서 위의 메서드들을 사용하여 Query 문자열을 추출할 때 한글 깨짐 현상이 발생한다. 해결 방법
은 요청 방식에 따라 다르다.
GET 방식 – 서버에 따라 다르다.

 Tomcat 8.0 : 한글 문제가 발생하지 않는다.
 Tomcat 7.0 이하 : 환경 파일인 server.xml 파일에서 protocol="HTTP/1.1" 속성을 포함하고 있는
 
<Connector> 태그를 찾아 URIEncoding=”utf-8” 속성을 추가한다. 


POST 방식 – Query 문자열을 추출하기 전에 HttpServletRequest 에서 제공되는

  setCharacterEncoding(“utf-8”) 을 호출한다.


TOMCAT 9.0 한글 안깨지고 내부적으로 알아서 해준다.   7. 대는 한글이 깨지기도 햇다

이제 GET 방식일때 한글은 신경 안써도 된다.



▣ 상태정보 유지 기술

웹 브라우저에서 웹 서버에 정보를 요청할 때 이전 접속시의 결과물(상태정보)를 일정시간 동안 유지하는 것
을 상태정보 유지라고 한다. 상태정보 유지 방법은 여러 가지가 있으며


세션을 소개하는 부분 오늘 교육의 하이라이트!!!!!1



세션을 안쓰고 쿠키를 가지고 브라우저에 저장해도 된다.

브라우저에 저장하는건 클라이언트 별로 브라우저안에 저장한다.
그래서 보안적으로 문제가 될 수 있다.

쿠키 기술을 가지고 회원들의 중요한 정보를 보관했었다 그래서 난리남

그다음 나온 것이 쿠키는 활용하지 마라 



주로 쿠키로 보관하는건  24시간 동안 팝업창 안띄워놓기

 
 중요한 상태정보는 서버에 보관되고 
 
 세션객체의 아이디만 클라이언트에 저장한다.
 


//////////////////////////////
17 페이지


[ HttpSession 객체를 이용한 상태정보 유지 ]
HttpSession 객체를 이용하는 상태 정보 유지는 다음과 같은 특징을 지원한다.
- 상태 정보는 객체로 만들어서 서버에 보관한다.
- 상태 정보가 유지되는 최대 시간은 요청을 보내온 브라우저가 기동되어 있는 동안이다.
- 구현 방법
(1) HttpSession 객체를 생성하거나 추출한다. 
(2) HttpSession 객체에 상태정보를 보관할 객체를 등록한다. (한번만 등록하면 된다.)
(3) HttpSession 객체에 등록되어 있는 상태정보 객체의 참조 값을 얻어서 사용한다.(읽기, 변경)
(4) HttpSession 객체에 등록되어 있는 상태정보 객체가 더 이상 필요 없으면 삭제할 수도 있다




- request.getSession() : HttpSession 객체를 추출하거나 새로이 생성한다. request.getSession(true) 와 동일하
다. request.getSession(false) 는 HttpSession 객체를 추출하여 리턴하는데 없으면 null을
리턴한다.
  .>>아규먼트를 안줄수도 있고 줄수도 있다.
  주면은 true이다 세션객체가 안만들어있으면 새로 만들고
  만들어 진거면 새로 만들어서 준다.
  세션을 만들기 위해서 true 또는
  
  
  false 안만들어져있으면 null
  만들어진 객체가 있으면 그대로 세션을 가져온다.
  만들어진것을 가져온다 하면 false이다.
-----------------------------> http세션 객체를 리턴해주는데 이미 만들어진 것을 리턴할수도 새로 만들어서 리턴할 수도있다.
세션 객체에 일정 기간 보관해서
- session.setAttribute(“xxx”, new Data()) : 보관하려는 정보를 객체로 만들어 HttpSession객체에 저장한다.
 “xxx” 라는 이름으로 객체의 참조 값을 보관한다 .
 
 
 처음이 세션이름 두번째가 세션
 
 똑같은 이름으로 등록한것이 만으면 
 

- session.getAttribute(“xxx”) : “xxx” 라는 이름으로 보관된 객체에 대한 참조 값을 리턴한다
----------------> 강제 형변환 조상일때는 자손읠때 형변환 할 수 없다.

remove attribute 하면 된다.

박스안에 있는것이 거의 기본이ㅏㄷ.
(1) HttpSession session = request.getSession();
(2) session.setAttribute(“xxx”, new Data()); 
(3) Data ref = (Data)session.getAttribute(“xxx”);
(4) session.removeAttribute(“xxx”)  이부분이 박스 안의 내용


- session.invalidate() : HttpSession 객체를 강제로 삭제한다
세션 객체를 강제로 삭제하는 메소드 이다.


//////////////////////////////////////////////////

 

/////////////////////////////////////////////////////////
18페이지

세션객체를 보관하는 상태정보 는

세션 객체만의 고유아이디가 있는데 그 아이디는 브라우저에 저장된다.
브라우저에서 세션아이디에 대한 쿠키는 

자동으로 로그아웃되어지는데 세션아이디에 대한 쿠키가 사라졌기 대문이다.

내부적으로 쿠키를 쓴다.

우리가 직접적으로 쿠키를 사용할 일은 없다.

응답시 세션객체에 대한 아이디어를 톰캣에 보관한다.

보관된 세션아이디에 대한 ㅜ키를 서버에게 보낸다.

WAS와 브라우저가 약속에의해서 한다.















