[ FileUpload 서블릿 구현 ]
클라이언트단(브라우저)에서 파일을 선택해서 서버에 전송하는 것을 파일업로드라 한다. 웹 사용자가 전송하려는 파일을 선택할 수 있게 <input
type=”file”……> 태그를 <form> 태그 안에 사용한다.

file form 태그안에 사용한다.


** (파일을 업로드 할때는)  요청방식이 반드시 POST여야 한다.
->
또한 요청 방식은 반드시 POST 여야 하며 enctype=”multipart/form-data”라는 속성을 추가로 사용해서 전송하려는 파일의 내용이 인코딩되지 않은 상태로
전송되도록 구현해야 한다. 

**enctype
->
<form> 태그에 enctype=”multipart/form-data”을 설정한 경우에는 입력 폼에 사용자가 입력한 내용이 name=value&name=value…
형식으로 인코딩되어 전달되는 것이 아니고 여러 파티션(multipart)으로 나뉘어서 서버에 전송된다.


-> Servlet jsp 교재에서 . application/x-www-form-urlencoded\
/////

사용자가 입력하거나 한 것에는 multipart/form-data.

2. mutipart/form-data
파일 받으면서 설정해준게 이 값인데 이미지나 파일을 서버로 전송할 경우 이 방식을 사용한다고
한다

///////////////////


<form> 태그를 구성하는 각각의 <input> 태그별로 그리고 업로드되는 파일별로 하나의 파트를 이루게 되며 각각의 파티션은 “------boundary ID”로
구분된다. 이렇게 구성하는 Content-Type 을 multipart/form-data 라고 한다



enctype에다가 multipart/formdata를 줘야 한다.



[ 파일업로드를 처리하는 서블릿 구현 ]  서블릿 파일을 처리하는 서블릿을 구현할 때는 mult
여러개

서블릿 컨테잊너가 대신 해준다. was가 대신

클라잉

@MultipartConfig (location = "c:/Temp/uploadtest")
 //
public class PartTestServlet extends HttpServlet { 
 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, 
IOException {
 request.setCharacterEncoding("utf-8");
 
 Collection<Part> parts = request.getParts(); -> 이때 리턴되는 것은 몇개의 파트가 리턴되었ㄴ든 간에 colleciton이 리턴된다.
 
 
 for(Part part : parts) { 
 String filename = part.getSubmittedFileName();
 if (filename != null) {
part.write(fileName); 
 } else {
 // 다른 작업
 }
 
 
 업로드되는 정보에 대한 파트 
 
 
 사용자가 직접 입력하고 일반쿼리
 
 업로드 되는 파일을 담고있ㄴ는 파트는 업로드 되는 파일의 이름을 가지고 있다 .그래서
 
 partgetSubmittedFileName(); 으로 구분 한다.
 
 submit되는 파일이름을 추출하시오
 submitedfilename이 널이 아니라면
 partwrit(fileName) 해주면 된다.
 그때는 널이 된다.
